#ifndef VULNERABILITY_H
#define VULNERABILITY_H
#pragma once

#include <bitset>
#include <iostream>
#include <map>
#include <unordered_map>

#include "analysegraph\bglgraph.h"
#include "architectureElements.h"

/*
reqPrivileges[0] Read/Write: (Functinal Communication Link)
reqPrivileges[1] Execute: (Functional Component)
reqPrivileges[2] Read: (Functional Component)
reqPrivileges[3] Write: (Functional Component)
reqPrivileges[4] Full Control: (Functional Component)
*/

class Vulnerability {
public:
  unsigned int m_ID;
  unsigned short m_reqPriveleges;
  unsigned short m_accPriveleges;
  unsigned int m_componentType; // describes for which component types the
                                // vulnerability is applicable
  unsigned int m_interfaceType;
  unsigned int m_relExploit;
  float m_exploitVal;
  unsigned short m_vulClass;
  std::string m_description; // a brief description
  std::string m_cwe;

  bool m_integrity;
  bool m_availability;
  bool m_confidentiality;
  bool m_authentication;
  bool m_authorization;

  Vulnerability(unsigned int ID);
  Vulnerability(std::string ID);
  Vulnerability(unsigned short reqPriveleges, unsigned short accPriveleges,
                unsigned int componentType, std::string description,
                unsigned int relExploit);
  Vulnerability(unsigned short reqPriveleges, unsigned short accPriveleges,
                unsigned int componentType, std::string description,
                unsigned int relExploit, float exploitVal);
  Vulnerability(unsigned int ID, unsigned short reqPriveleges,
                unsigned short accPriveleges, unsigned int componentType,
                std::string description, unsigned int relExploit,
                float exploitVal);
  Vulnerability(unsigned int ID, unsigned short reqPriveleges,
                unsigned short accPriveleges, unsigned int componentType,
                std::string description, unsigned int relExploit);
  Vulnerability(unsigned short reqPriveleges, unsigned short accPriveleges,
                unsigned int componentType, unsigned int relExploit);
  Vulnerability(unsigned short reqPriveleges, unsigned short accPriveleges,
                unsigned int componentType, unsigned int relExploit,
                float exploitVal, bool integrity, bool availability,
                bool confidentiality, bool authentication, bool authorization);

private:
};

void vulnerabilityMapper(
    std::unordered_map<unsigned int, Vulnerability> globalVulMap,
    std::string entryPoint, const diGraph &eeArchitecture,
    std::vector<std::pair<unsigned int, std::vector<Vulnerability>>>
        &vulMapping,
    std::unordered_map<unsigned int, std::string> componetClasses,
    std::map<std::string, std::string> &compInstance);

#endif VULNERABILITY_H